var frisc_asm = (function(){
  /* Generated by PEG.js 0.6.2 (http://pegjs.majda.cz/). */
  
  var result = {
    /*
     * Parses the input with a generated parser. If the parsing is successfull,
     * returns a value explicitly or implicitly specified by the grammar from
     * which the parser was generated (see |PEG.buildParser|). If the parsing is
     * unsuccessful, throws |PEG.parser.SyntaxError| describing the error.
     */
    parse: function(input, startRule) {
      var parseFunctions = {
        "absaddr_mem": parse_absaddr_mem,
        "aluop": parse_aluop,
        "aluop_name": parse_aluop_name,
        "base": parse_base,
        "baseop": parse_baseop,
        "baseop_name": parse_baseop_name,
        "cmpop": parse_cmpop,
        "cmpop_name": parse_cmpop_name,
        "commentPart": parse_commentPart,
        "delimiter": parse_delimiter,
        "dsop": parse_dsop,
        "dsop_name": parse_dsop_name,
        "dwhbop": parse_dwhbop,
        "dwhbop_name": parse_dwhbop_name,
        "dwop": parse_dwop,
        "dwop_name": parse_dwop_name,
        "endop": parse_endop,
        "endop_name": parse_endop_name,
        "equop": parse_equop,
        "equop_name": parse_equop_name,
        "flag": parse_flag,
        "flag_name": parse_flag_name,
        "immaddr": parse_immaddr,
        "instruction": parse_instruction,
        "instruction_end": parse_instruction_end,
        "instruction_or_end": parse_instruction_or_end,
        "instructions": parse_instructions,
        "instructions_main": parse_instructions_main,
        "jmpop_name": parse_jmpop_name,
        "label": parse_label,
        "memop": parse_memop,
        "memop_name": parse_memop_name,
        "moveop": parse_moveop,
        "moveop_name": parse_moveop_name,
        "newline": parse_newline,
        "nonjmpop_name": parse_nonjmpop_name,
        "number": parse_number,
        "numberWithoutBase": parse_numberWithoutBase,
        "operation": parse_operation,
        "operationPart": parse_operationPart,
        "orgop": parse_orgop,
        "orgop_name": parse_orgop_name,
        "regaddr": parse_regaddr,
        "register": parse_register,
        "rinaddr": parse_rinaddr,
        "rinaddroff": parse_rinaddroff,
        "sraddr": parse_sraddr,
        "stackop": parse_stackop,
        "stackop_name": parse_stackop_name,
        "uprop": parse_uprop,
        "whitespace": parse_whitespace
      };
      
      if (startRule !== undefined) {
        if (parseFunctions[startRule] === undefined) {
          throw new Error("Invalid rule name: " + quote(startRule) + ".");
        }
      } else {
        startRule = "instructions_main";
      }
      
      var pos = 0;
      var reportFailures = 0;
      var rightmostFailuresPos = 0;
      var rightmostFailuresExpected = [];
      var cache = {};
      
      function padLeft(input, padding, length) {
        var result = input;
        
        var padLength = length - input.length;
        for (var i = 0; i < padLength; i++) {
          result = padding + result;
        }
        
        return result;
      }
      
      function escape(ch) {
        var charCode = ch.charCodeAt(0);
        var escapeChar;
        var length;
        
        if (charCode <= 0xFF) {
          escapeChar = 'x';
          length = 2;
        } else {
          escapeChar = 'u';
          length = 4;
        }
        
        return '\\' + escapeChar + padLeft(charCode.toString(16).toUpperCase(), '0', length);
      }
      
      function quote(s) {
        /*
         * ECMA-262, 5th ed., 7.8.4: All characters may appear literally in a
         * string literal except for the closing quote character, backslash,
         * carriage return, line separator, paragraph separator, and line feed.
         * Any character may appear in the form of an escape sequence.
         *
         * For portability, we also escape escape all control and non-ASCII
         * characters. Note that "\0" and "\v" escape sequences are not used
         * because JSHint does not like the first and IE the second.
         */
        return '"' + s
          .replace(/\\/g, '\\\\')  // backslash
          .replace(/"/g, '\\"')    // closing quote character
          .replace(/\x08/g, '\\b') // backspace
          .replace(/\t/g, '\\t')   // horizontal tab
          .replace(/\n/g, '\\n')   // line feed
          .replace(/\f/g, '\\f')   // form feed
          .replace(/\r/g, '\\r')   // carriage return
          .replace(/[\x00-\x07\x0B\x0E-\x1F\x80-\uFFFF]/g, escape)
          + '"';
      }
      
      function matchFailed(failure) {
        if (pos < rightmostFailuresPos) {
          return;
        }
        
        if (pos > rightmostFailuresPos) {
          rightmostFailuresPos = pos;
          rightmostFailuresExpected = [];
        }
        
        rightmostFailuresExpected.push(failure);
      }
      
      function parse_instructions_main() {
        var cacheKey = "instructions_main@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0;
        var pos0;
        
        pos0 = pos;
        result0 = parse_instructions();
        if (result0 !== null) {
          result0 = (function(ins) {
        
            var instrs = [];
            var machinecode = [];
            var unknownlabels = [];
        
            for (var i=0; i<ins.length; i++) {
              if (typeof ins[i][0].op !== "undefined" && ins[i][0].op !== "") {
                instrs.push(ins[i][0]);
              }
            }
        
            function replaceLabel(element) {
              if (element.type === "label") {
                var labelValue = labels[element.value];
        
                if (typeof labelValue !== "undefined") {
                  element.type = "num";
                  element.value = labelValue;
                } else {
                  unknownlabels.push(element.value);
                  element.value = null;
                }
              }
            }
        
            // replace labels
            for (var i=0; i<instrs.length; i++) {
              if (instrs[i].op in aluops || instrs[i].op in cmpops || instrs[i].op in moveops) {
                replaceLabel(instrs[i].alusrc2);
              } else if (instrs[i].op in jmpops) {
                replaceLabel(instrs[i].addr);
              } else if (instrs[i].op in memops) {
                replaceLabel(instrs[i].mem);
              } else if (instrs[i].op in dwhbops) {
                var vals = [];
        
                for (var j=0; j<instrs[i].values.length; j++) {
                  replaceLabel(instrs[i].values[j]);
                  vals.push(instrs[i].values[j].value);
                }
        
                instrs[i].values = vals;
              }
            }
        
            // check if all labels are defined
            if (unknownlabels.length > 0) {
              throw new Error("Unknown labels: " + unknownlabels.toString());
            }
        
            // generate machine code
            for (var i=0; i<instrs.length; i++) {
              generateMachineCode(instrs[i]);
              machinecode.push(instrs[i]);
            }
        
            // generate memory model
            var mem = [];
        
            var writeToMemory = function(bitString, startPosition, memoryArray) {
              if (bitString.length % 8 !== 0) {
                throw new Error("Memory string has wrong length");
              }
        
              var elems = bitString.match(/.{8}/g);
        
              for (var i=0; i<elems.length; i++) {
                memoryArray[startPosition+i] = elems[elems.length - i - 1];
              }
        
              return startPosition + elems.length;
            };
        
            for (var opCount=0, memCount=0; opCount<machinecode.length; ) {
              if (typeof machinecode[opCount].curloc === "undefined") {
                opCount++;
              } else {
                if (machinecode[opCount].curloc !== memCount) {
                  memCount = writeToMemory("00000000", memCount, mem);
                } else {
                  if (typeof machinecode[opCount].machineCode === "string") {
                    memCount = writeToMemory(machinecode[opCount].machineCode, memCount, mem);
                  } else {
                    for (var j=0; j<machinecode[opCount].machineCode.length; j++) {
                      memCount = writeToMemory(machinecode[opCount].machineCode[j], memCount, mem);
                    }
                  }
                  opCount += 1;
                }
              }
            }
        
            return { ast : machinecode, mem : mem};
          })(result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_instructions() {
        var cacheKey = "instructions@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1, pos2;
        
        pos0 = pos;
        pos1 = pos;
        pos2 = pos;
        result1 = parse_instruction_or_end();
        if (result1 !== null) {
          result2 = (function() {linecounter++; return true;})() ? "" : null;
          if (result2 !== null) {
            result1 = [result1, result2];
          } else {
            result1 = null;
            pos = pos2;
          }
        } else {
          result1 = null;
          pos = pos2;
        }
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            pos2 = pos;
            result1 = parse_instruction_or_end();
            if (result1 !== null) {
              result2 = (function() {linecounter++; return true;})() ? "" : null;
              if (result2 !== null) {
                result1 = [result1, result2];
              } else {
                result1 = null;
                pos = pos2;
              }
            } else {
              result1 = null;
              pos = pos2;
            }
          }
        } else {
          result0 = null;
        }
        if (result0 !== null) {
          pos2 = pos;
          reportFailures++;
          if (input.length > pos) {
            result2 = input.charAt(pos);
            pos++;
          } else {
            result2 = null;
            if (reportFailures === 0) {
              matchFailed("any character");
            }
          }
          if (result2 !== null) {
            result1 = [];
            while (result2 !== null) {
              result1.push(result2);
              if (input.length > pos) {
                result2 = input.charAt(pos);
                pos++;
              } else {
                result2 = null;
                if (reportFailures === 0) {
                  matchFailed("any character");
                }
              }
            }
          } else {
            result1 = null;
          }
          reportFailures--;
          if (result1 === null) {
            result1 = "";
          } else {
            result1 = null;
            pos = pos2;
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(ins) {
              return ins;
            })(result0[0]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_newline() {
        var cacheKey = "newline@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0;
        
        if (input.charCodeAt(pos) === 10) {
          result0 = "\n";
          pos += 1;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"\\n\"");
          }
        }
        if (result0 === null) {
          if (input.substr(pos, 2) === "\r\n") {
            result0 = "\r\n";
            pos += 2;
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"\\r\\n\"");
            }
          }
          if (result0 === null) {
            if (input.charCodeAt(pos) === 13) {
              result0 = "\r";
              pos += 1;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"\\r\"");
              }
            }
            if (result0 === null) {
              if (input.substr(pos, 2) === "\n\r") {
                result0 = "\n\r";
                pos += 2;
              } else {
                result0 = null;
                if (reportFailures === 0) {
                  matchFailed("\"\\n\\r\"");
                }
              }
            }
          }
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_instruction_or_end() {
        var cacheKey = "instruction_or_end@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1;
        var pos0, pos1;
        
        pos0 = pos;
        result0 = parse_instruction_end();
        if (result0 !== null) {
          result0 = (function(i) { var ins = i; ins.line = linecounter-1; return {}})(result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        if (result0 === null) {
          pos0 = pos;
          pos1 = pos;
          result0 = parse_instruction();
          if (result0 !== null) {
            if (/^[\n]/.test(input.charAt(pos))) {
              result1 = input.charAt(pos);
              pos++;
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("[\\n]");
              }
            }
            if (result1 !== null) {
              result0 = [result0, result1];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
          if (result0 !== null) {
            result0 = (function(i) { var ins = i; ins.line = linecounter; return ins;})(result0[0]);
          }
          if (result0 === null) {
            pos = pos0;
          }
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_instruction_end() {
        var cacheKey = "instruction_end@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4, result5, result6;
        var pos0, pos1, pos2;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_label();
        result0 = result0 !== null ? result0 : "";
        if (result0 !== null) {
          result2 = parse_whitespace();
          if (result2 !== null) {
            result1 = [];
            while (result2 !== null) {
              result1.push(result2);
              result2 = parse_whitespace();
            }
          } else {
            result1 = null;
          }
          if (result1 !== null) {
            result2 = parse_endop();
            if (result2 !== null) {
              result3 = parse_commentPart();
              result3 = result3 !== null ? result3 : "";
              if (result3 !== null) {
                pos2 = pos;
                result4 = parse_newline();
                if (result4 !== null) {
                  result5 = [];
                  if (input.length > pos) {
                    result6 = input.charAt(pos);
                    pos++;
                  } else {
                    result6 = null;
                    if (reportFailures === 0) {
                      matchFailed("any character");
                    }
                  }
                  while (result6 !== null) {
                    result5.push(result6);
                    if (input.length > pos) {
                      result6 = input.charAt(pos);
                      pos++;
                    } else {
                      result6 = null;
                      if (reportFailures === 0) {
                        matchFailed("any character");
                      }
                    }
                  }
                  if (result5 !== null) {
                    result4 = [result4, result5];
                  } else {
                    result4 = null;
                    pos = pos2;
                  }
                } else {
                  result4 = null;
                  pos = pos2;
                }
                result4 = result4 !== null ? result4 : "";
                if (result4 !== null) {
                  result0 = [result0, result1, result2, result3, result4];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(l, o, c) {
              return o;
            })(result0[0], result0[2], result0[3]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_instruction() {
        var cacheKey = "instruction@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_label();
        result0 = result0 !== null ? result0 : "";
        if (result0 !== null) {
          result1 = parse_operationPart();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_commentPart();
            result2 = result2 !== null ? result2 : "";
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(l, o, c) {
            if (o === null) {
              if (l !== null && l !== "") {
                addLabel(l, curloc);
              }
              return {};
            }
        
            if (!(o.op in dwops || o.op in equops || o.op in endops)) {
              curloc = curloc % 4 === 0 ? curloc : curloc + (4-curloc%4);
            }
        
            if (l !== null && l !== "") {
              if (!(o.op in baseops || o.op in endops || o.op in orgops || o.op in equops)) {
                addLabel(l, curloc);
              } else if (o.op in equops) {
                addLabel(l, o.value);
              }
            }
        
            o.curloc = curloc;
        
            if (o.op in aluops || o.op in cmpops || o.op in moveops || o.op in jmpops || o.op in rethaltops || o.op in memops || o.op in stackops) {
              curloc += 4;
            } else if (o.op in orgops) {
              curloc = o.value;
            } else if (o.op in dwops) {
              curloc += o.values.length;
            } else if (o.op in equops) {
              curloc = curloc;
            } else if (o.op in endops) {
              curloc = curloc;
            } else if (o.op in dsops) {
              curloc += o.value;
            } else if (o.op in dwhbops) {
              curloc += o.size*o.values.length;
            }
        
            if (o.op in baseops) {
              defaultBase = o.value;
            }
        
            if (o.op in endops || o.op in equops || o.op in orgops || o.op in baseops) {
              return {};
            } else {
              return o;
            }
          })(result0[0], result0[1], result0[2]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_label() {
        var cacheKey = "label@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        if (/^[a-zA-Z]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[a-zA-Z]");
          }
        }
        if (result0 !== null) {
          result1 = [];
          if (/^[0-9a-zA-Z_]/.test(input.charAt(pos))) {
            result2 = input.charAt(pos);
            pos++;
          } else {
            result2 = null;
            if (reportFailures === 0) {
              matchFailed("[0-9a-zA-Z_]");
            }
          }
          while (result2 !== null) {
            result1.push(result2);
            if (/^[0-9a-zA-Z_]/.test(input.charAt(pos))) {
              result2 = input.charAt(pos);
              pos++;
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("[0-9a-zA-Z_]");
              }
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(first, rest) {
            return first + rest.join("");
          })(result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_operationPart() {
        var cacheKey = "operationPart@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result1 = parse_whitespace();
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            result1 = parse_whitespace();
          }
        } else {
          result0 = null;
        }
        if (result0 !== null) {
          result1 = parse_operation();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(o) {return o;})(result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_operation() {
        var cacheKey = "operation@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0;
        
        result0 = parse_dwhbop();
        if (result0 === null) {
          result0 = parse_baseop();
          if (result0 === null) {
            result0 = parse_dsop();
            if (result0 === null) {
              result0 = parse_equop();
              if (result0 === null) {
                result0 = parse_dwop();
                if (result0 === null) {
                  result0 = parse_orgop();
                  if (result0 === null) {
                    result0 = parse_stackop();
                    if (result0 === null) {
                      result0 = parse_memop();
                      if (result0 === null) {
                        result0 = parse_uprop();
                        if (result0 === null) {
                          result0 = parse_moveop();
                          if (result0 === null) {
                            result0 = parse_cmpop();
                            if (result0 === null) {
                              result0 = parse_aluop();
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_regaddr() {
        var cacheKey = "regaddr@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0;
        var pos0;
        
        pos0 = pos;
        result0 = parse_register();
        if (result0 !== null) {
          result0 = (function(value) { return {type : "reg", value : value}; })(result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_sraddr() {
        var cacheKey = "sraddr@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        if (/^[sS]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[sS]");
          }
        }
        if (result0 !== null) {
          if (/^[rR]/.test(input.charAt(pos))) {
            result1 = input.charAt(pos);
            pos++;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("[rR]");
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(value) { return {type : "sr", value : "sr"}; })(result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_immaddr() {
        var cacheKey = "immaddr@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0;
        var pos0;
        
        pos0 = pos;
        result0 = parse_label();
        if (result0 !== null) {
          result0 = (function(value) { return {type : "label", value : value}; })(result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        if (result0 === null) {
          pos0 = pos;
          result0 = parse_number();
          if (result0 !== null) {
            result0 = (function(value) { return {type : "num", value : value}; })(result0);
          }
          if (result0 === null) {
            pos = pos0;
          }
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_absaddr_mem() {
        var cacheKey = "absaddr_mem@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        if (input.charCodeAt(pos) === 40) {
          result0 = "(";
          pos += 1;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"(\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_label();
          if (result1 !== null) {
            if (input.charCodeAt(pos) === 41) {
              result2 = ")";
              pos += 1;
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\")\"");
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(value) { return {type : "label", value : value}; })(result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        if (result0 === null) {
          pos0 = pos;
          pos1 = pos;
          if (input.charCodeAt(pos) === 40) {
            result0 = "(";
            pos += 1;
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"(\"");
            }
          }
          if (result0 !== null) {
            result1 = parse_number();
            if (result1 !== null) {
              if (input.charCodeAt(pos) === 41) {
                result2 = ")";
                pos += 1;
              } else {
                result2 = null;
                if (reportFailures === 0) {
                  matchFailed("\")\"");
                }
              }
              if (result2 !== null) {
                result0 = [result0, result1, result2];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
          if (result0 !== null) {
            result0 = (function(value) { return {type : "num", value : value}; })(result0[1]);
          }
          if (result0 === null) {
            pos = pos0;
          }
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_rinaddr() {
        var cacheKey = "rinaddr@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        if (input.charCodeAt(pos) === 40) {
          result0 = "(";
          pos += 1;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"(\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_regaddr();
          if (result1 !== null) {
            if (input.charCodeAt(pos) === 41) {
              result2 = ")";
              pos += 1;
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\")\"");
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(value) { return value; })(result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_rinaddroff() {
        var cacheKey = "rinaddroff@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        if (input.charCodeAt(pos) === 40) {
          result0 = "(";
          pos += 1;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"(\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_register();
          if (result1 !== null) {
            result2 = parse_numberWithoutBase();
            if (result2 === null) {
              result2 = "";
            }
            if (result2 !== null) {
              if (input.charCodeAt(pos) === 41) {
                result3 = ")";
                pos += 1;
              } else {
                result3 = null;
                if (reportFailures === 0) {
                  matchFailed("\")\"");
                }
              }
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(reg, val) {
              return {type : "regoff", value : reg, offset : val[1] === "" ? 0 : val[1]  };
            })(result0[1], result0[2]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_delimiter() {
        var cacheKey = "delimiter@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3;
        var pos0;
        
        pos0 = pos;
        result0 = [];
        result1 = parse_whitespace();
        while (result1 !== null) {
          result0.push(result1);
          result1 = parse_whitespace();
        }
        if (result0 !== null) {
          if (input.charCodeAt(pos) === 44) {
            result1 = ",";
            pos += 1;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\",\"");
            }
          }
          if (result1 !== null) {
            result2 = [];
            result3 = parse_whitespace();
            while (result3 !== null) {
              result2.push(result3);
              result3 = parse_whitespace();
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos0;
            }
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_moveop_name() {
        var cacheKey = "moveop_name@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0;
        
        if (input.substr(pos, 4) === "MOVE") {
          result0 = "MOVE";
          pos += 4;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"MOVE\"");
          }
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_aluop_name() {
        var cacheKey = "aluop_name@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0;
        
        if (input.substr(pos, 2) === "OR") {
          result0 = "OR";
          pos += 2;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"OR\"");
          }
        }
        if (result0 === null) {
          if (input.substr(pos, 3) === "AND") {
            result0 = "AND";
            pos += 3;
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"AND\"");
            }
          }
          if (result0 === null) {
            if (input.substr(pos, 3) === "XOR") {
              result0 = "XOR";
              pos += 3;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"XOR\"");
              }
            }
            if (result0 === null) {
              if (input.substr(pos, 3) === "ADD") {
                result0 = "ADD";
                pos += 3;
              } else {
                result0 = null;
                if (reportFailures === 0) {
                  matchFailed("\"ADD\"");
                }
              }
              if (result0 === null) {
                if (input.substr(pos, 3) === "ADC") {
                  result0 = "ADC";
                  pos += 3;
                } else {
                  result0 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"ADC\"");
                  }
                }
                if (result0 === null) {
                  if (input.substr(pos, 3) === "SUB") {
                    result0 = "SUB";
                    pos += 3;
                  } else {
                    result0 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"SUB\"");
                    }
                  }
                  if (result0 === null) {
                    if (input.substr(pos, 3) === "SBC") {
                      result0 = "SBC";
                      pos += 3;
                    } else {
                      result0 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"SBC\"");
                      }
                    }
                    if (result0 === null) {
                      if (input.substr(pos, 4) === "ROTL") {
                        result0 = "ROTL";
                        pos += 4;
                      } else {
                        result0 = null;
                        if (reportFailures === 0) {
                          matchFailed("\"ROTL\"");
                        }
                      }
                      if (result0 === null) {
                        if (input.substr(pos, 4) === "ROTR") {
                          result0 = "ROTR";
                          pos += 4;
                        } else {
                          result0 = null;
                          if (reportFailures === 0) {
                            matchFailed("\"ROTR\"");
                          }
                        }
                        if (result0 === null) {
                          if (input.substr(pos, 3) === "SHL") {
                            result0 = "SHL";
                            pos += 3;
                          } else {
                            result0 = null;
                            if (reportFailures === 0) {
                              matchFailed("\"SHL\"");
                            }
                          }
                          if (result0 === null) {
                            if (input.substr(pos, 3) === "SHR") {
                              result0 = "SHR";
                              pos += 3;
                            } else {
                              result0 = null;
                              if (reportFailures === 0) {
                                matchFailed("\"SHR\"");
                              }
                            }
                            if (result0 === null) {
                              if (input.substr(pos, 4) === "ASHR") {
                                result0 = "ASHR";
                                pos += 4;
                              } else {
                                result0 = null;
                                if (reportFailures === 0) {
                                  matchFailed("\"ASHR\"");
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_cmpop_name() {
        var cacheKey = "cmpop_name@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0;
        
        if (input.substr(pos, 3) === "CMP") {
          result0 = "CMP";
          pos += 3;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"CMP\"");
          }
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_nonjmpop_name() {
        var cacheKey = "nonjmpop_name@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0;
        
        if (input.substr(pos, 4) === "RETI") {
          result0 = "RETI";
          pos += 4;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"RETI\"");
          }
        }
        if (result0 === null) {
          if (input.substr(pos, 4) === "RETN") {
            result0 = "RETN";
            pos += 4;
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"RETN\"");
            }
          }
          if (result0 === null) {
            if (input.substr(pos, 3) === "RET") {
              result0 = "RET";
              pos += 3;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"RET\"");
              }
            }
            if (result0 === null) {
              if (input.substr(pos, 4) === "HALT") {
                result0 = "HALT";
                pos += 4;
              } else {
                result0 = null;
                if (reportFailures === 0) {
                  matchFailed("\"HALT\"");
                }
              }
            }
          }
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_jmpop_name() {
        var cacheKey = "jmpop_name@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0;
        
        if (input.substr(pos, 2) === "JP") {
          result0 = "JP";
          pos += 2;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"JP\"");
          }
        }
        if (result0 === null) {
          if (input.substr(pos, 4) === "CALL") {
            result0 = "CALL";
            pos += 4;
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"CALL\"");
            }
          }
          if (result0 === null) {
            if (input.substr(pos, 2) === "JR") {
              result0 = "JR";
              pos += 2;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"JR\"");
              }
            }
          }
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_memop_name() {
        var cacheKey = "memop_name@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0;
        
        if (input.substr(pos, 5) === "LOADB") {
          result0 = "LOADB";
          pos += 5;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"LOADB\"");
          }
        }
        if (result0 === null) {
          if (input.substr(pos, 6) === "STOREB") {
            result0 = "STOREB";
            pos += 6;
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"STOREB\"");
            }
          }
          if (result0 === null) {
            if (input.substr(pos, 5) === "LOADH") {
              result0 = "LOADH";
              pos += 5;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"LOADH\"");
              }
            }
            if (result0 === null) {
              if (input.substr(pos, 6) === "STOREH") {
                result0 = "STOREH";
                pos += 6;
              } else {
                result0 = null;
                if (reportFailures === 0) {
                  matchFailed("\"STOREH\"");
                }
              }
              if (result0 === null) {
                if (input.substr(pos, 4) === "LOAD") {
                  result0 = "LOAD";
                  pos += 4;
                } else {
                  result0 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"LOAD\"");
                  }
                }
                if (result0 === null) {
                  if (input.substr(pos, 5) === "STORE") {
                    result0 = "STORE";
                    pos += 5;
                  } else {
                    result0 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"STORE\"");
                    }
                  }
                }
              }
            }
          }
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_stackop_name() {
        var cacheKey = "stackop_name@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0;
        
        if (input.substr(pos, 3) === "POP") {
          result0 = "POP";
          pos += 3;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"POP\"");
          }
        }
        if (result0 === null) {
          if (input.substr(pos, 4) === "PUSH") {
            result0 = "PUSH";
            pos += 4;
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"PUSH\"");
            }
          }
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_orgop_name() {
        var cacheKey = "orgop_name@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0;
        
        if (input.substr(pos, 4) === "`ORG") {
          result0 = "`ORG";
          pos += 4;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"`ORG\"");
          }
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_dwop_name() {
        var cacheKey = "dwop_name@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0;
        
        if (input.substr(pos, 3) === "`DW") {
          result0 = "`DW";
          pos += 3;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"`DW\"");
          }
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_equop_name() {
        var cacheKey = "equop_name@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0;
        
        if (input.substr(pos, 4) === "`EQU") {
          result0 = "`EQU";
          pos += 4;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"`EQU\"");
          }
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_dsop_name() {
        var cacheKey = "dsop_name@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0;
        
        if (input.substr(pos, 3) === "`DS") {
          result0 = "`DS";
          pos += 3;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"`DS\"");
          }
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_endop_name() {
        var cacheKey = "endop_name@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0;
        
        if (input.substr(pos, 4) === "`END") {
          result0 = "`END";
          pos += 4;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"`END\"");
          }
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_baseop_name() {
        var cacheKey = "baseop_name@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0;
        
        if (input.substr(pos, 5) === "`BASE") {
          result0 = "`BASE";
          pos += 5;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"`BASE\"");
          }
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_dwhbop_name() {
        var cacheKey = "dwhbop_name@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0;
        
        if (input.substr(pos, 2) === "DW") {
          result0 = "DW";
          pos += 2;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"DW\"");
          }
        }
        if (result0 === null) {
          if (input.substr(pos, 2) === "DH") {
            result0 = "DH";
            pos += 2;
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"DH\"");
            }
          }
          if (result0 === null) {
            if (input.substr(pos, 2) === "DB") {
              result0 = "DB";
              pos += 2;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"DB\"");
              }
            }
          }
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_flag_name() {
        var cacheKey = "flag_name@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0;
        
        if (input.charCodeAt(pos) === 77) {
          result0 = "M";
          pos += 1;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"M\"");
          }
        }
        if (result0 === null) {
          if (input.substr(pos, 2) === "NN") {
            result0 = "NN";
            pos += 2;
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"NN\"");
            }
          }
          if (result0 === null) {
            if (input.substr(pos, 2) === "NV") {
              result0 = "NV";
              pos += 2;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"NV\"");
              }
            }
            if (result0 === null) {
              if (input.substr(pos, 2) === "NZ") {
                result0 = "NZ";
                pos += 2;
              } else {
                result0 = null;
                if (reportFailures === 0) {
                  matchFailed("\"NZ\"");
                }
              }
              if (result0 === null) {
                if (input.substr(pos, 2) === "NE") {
                  result0 = "NE";
                  pos += 2;
                } else {
                  result0 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"NE\"");
                  }
                }
                if (result0 === null) {
                  if (input.substr(pos, 2) === "NC") {
                    result0 = "NC";
                    pos += 2;
                  } else {
                    result0 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"NC\"");
                    }
                  }
                  if (result0 === null) {
                    if (input.charCodeAt(pos) === 78) {
                      result0 = "N";
                      pos += 1;
                    } else {
                      result0 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"N\"");
                      }
                    }
                    if (result0 === null) {
                      if (input.charCodeAt(pos) === 80) {
                        result0 = "P";
                        pos += 1;
                      } else {
                        result0 = null;
                        if (reportFailures === 0) {
                          matchFailed("\"P\"");
                        }
                      }
                      if (result0 === null) {
                        if (input.charCodeAt(pos) === 67) {
                          result0 = "C";
                          pos += 1;
                        } else {
                          result0 = null;
                          if (reportFailures === 0) {
                            matchFailed("\"C\"");
                          }
                        }
                        if (result0 === null) {
                          if (input.substr(pos, 3) === "ULT") {
                            result0 = "ULT";
                            pos += 3;
                          } else {
                            result0 = null;
                            if (reportFailures === 0) {
                              matchFailed("\"ULT\"");
                            }
                          }
                          if (result0 === null) {
                            if (input.substr(pos, 3) === "UGE") {
                              result0 = "UGE";
                              pos += 3;
                            } else {
                              result0 = null;
                              if (reportFailures === 0) {
                                matchFailed("\"UGE\"");
                              }
                            }
                            if (result0 === null) {
                              if (input.charCodeAt(pos) === 86) {
                                result0 = "V";
                                pos += 1;
                              } else {
                                result0 = null;
                                if (reportFailures === 0) {
                                  matchFailed("\"V\"");
                                }
                              }
                              if (result0 === null) {
                                if (input.charCodeAt(pos) === 90) {
                                  result0 = "Z";
                                  pos += 1;
                                } else {
                                  result0 = null;
                                  if (reportFailures === 0) {
                                    matchFailed("\"Z\"");
                                  }
                                }
                                if (result0 === null) {
                                  if (input.substr(pos, 2) === "EQ") {
                                    result0 = "EQ";
                                    pos += 2;
                                  } else {
                                    result0 = null;
                                    if (reportFailures === 0) {
                                      matchFailed("\"EQ\"");
                                    }
                                  }
                                  if (result0 === null) {
                                    if (input.substr(pos, 3) === "ULE") {
                                      result0 = "ULE";
                                      pos += 3;
                                    } else {
                                      result0 = null;
                                      if (reportFailures === 0) {
                                        matchFailed("\"ULE\"");
                                      }
                                    }
                                    if (result0 === null) {
                                      if (input.substr(pos, 3) === "UGT") {
                                        result0 = "UGT";
                                        pos += 3;
                                      } else {
                                        result0 = null;
                                        if (reportFailures === 0) {
                                          matchFailed("\"UGT\"");
                                        }
                                      }
                                      if (result0 === null) {
                                        if (input.substr(pos, 3) === "SLT") {
                                          result0 = "SLT";
                                          pos += 3;
                                        } else {
                                          result0 = null;
                                          if (reportFailures === 0) {
                                            matchFailed("\"SLT\"");
                                          }
                                        }
                                        if (result0 === null) {
                                          if (input.substr(pos, 3) === "SLE") {
                                            result0 = "SLE";
                                            pos += 3;
                                          } else {
                                            result0 = null;
                                            if (reportFailures === 0) {
                                              matchFailed("\"SLE\"");
                                            }
                                          }
                                          if (result0 === null) {
                                            if (input.substr(pos, 3) === "SGE") {
                                              result0 = "SGE";
                                              pos += 3;
                                            } else {
                                              result0 = null;
                                              if (reportFailures === 0) {
                                                matchFailed("\"SGE\"");
                                              }
                                            }
                                            if (result0 === null) {
                                              if (input.substr(pos, 3) === "SGT") {
                                                result0 = "SGT";
                                                pos += 3;
                                              } else {
                                                result0 = null;
                                                if (reportFailures === 0) {
                                                  matchFailed("\"SGT\"");
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_aluop() {
        var cacheKey = "aluop@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4, result5, result6;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_aluop_name();
        if (result0 !== null) {
          result2 = parse_whitespace();
          if (result2 !== null) {
            result1 = [];
            while (result2 !== null) {
              result1.push(result2);
              result2 = parse_whitespace();
            }
          } else {
            result1 = null;
          }
          if (result1 !== null) {
            result2 = parse_regaddr();
            if (result2 !== null) {
              result3 = parse_delimiter();
              if (result3 !== null) {
                result4 = parse_regaddr();
                if (result4 === null) {
                  result4 = parse_immaddr();
                }
                if (result4 !== null) {
                  result5 = parse_delimiter();
                  if (result5 !== null) {
                    result6 = parse_regaddr();
                    if (result6 !== null) {
                      result0 = [result0, result1, result2, result3, result4, result5, result6];
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(op, alusrc1, alusrc2, aludest) {
              return { op : op, optype : 'aluop', alusrc1 : alusrc1, alusrc2 : alusrc2, aludest : aludest };
            })(result0[0], result0[2], result0[4], result0[6]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_cmpop() {
        var cacheKey = "cmpop@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_cmpop_name();
        if (result0 !== null) {
          result2 = parse_whitespace();
          if (result2 !== null) {
            result1 = [];
            while (result2 !== null) {
              result1.push(result2);
              result2 = parse_whitespace();
            }
          } else {
            result1 = null;
          }
          if (result1 !== null) {
            result2 = parse_regaddr();
            if (result2 !== null) {
              result3 = parse_delimiter();
              if (result3 !== null) {
                result4 = parse_regaddr();
                if (result4 === null) {
                  result4 = parse_immaddr();
                }
                if (result4 !== null) {
                  result0 = [result0, result1, result2, result3, result4];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(op, alusrc1, alusrc2) {
              return { op : op, optype : 'cmpop', alusrc1 : alusrc1, alusrc2 : alusrc2 };
            })(result0[0], result0[2], result0[4]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_moveop() {
        var cacheKey = "moveop@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_moveop_name();
        if (result0 !== null) {
          result2 = parse_whitespace();
          if (result2 !== null) {
            result1 = [];
            while (result2 !== null) {
              result1.push(result2);
              result2 = parse_whitespace();
            }
          } else {
            result1 = null;
          }
          if (result1 !== null) {
            result2 = parse_regaddr();
            if (result2 === null) {
              result2 = parse_sraddr();
              if (result2 === null) {
                result2 = parse_immaddr();
              }
            }
            if (result2 !== null) {
              result3 = parse_delimiter();
              if (result3 !== null) {
                result4 = parse_regaddr();
                if (result4 === null) {
                  result4 = parse_sraddr();
                }
                if (result4 !== null) {
                  result0 = [result0, result1, result2, result3, result4];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(op, alusrc2, aludest) {
              return { op : op, optype : 'moveop', alusrc2 : alusrc2, aludest : aludest };
            })(result0[0], result0[2], result0[4]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_uprop() {
        var cacheKey = "uprop@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_jmpop_name();
        if (result0 !== null) {
          result1 = parse_flag();
          if (result1 !== null) {
            result3 = parse_whitespace();
            if (result3 !== null) {
              result2 = [];
              while (result3 !== null) {
                result2.push(result3);
                result3 = parse_whitespace();
              }
            } else {
              result2 = null;
            }
            if (result2 !== null) {
              result3 = parse_immaddr();
              if (result3 === null) {
                result3 = parse_rinaddr();
              }
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(op, fl, addr) {
              return { op : op, optype : 'jmpop', flag : fl, addr : addr};
            })(result0[0], result0[1], result0[3]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        if (result0 === null) {
          pos0 = pos;
          pos1 = pos;
          result0 = parse_nonjmpop_name();
          if (result0 !== null) {
            result1 = parse_flag();
            if (result1 !== null) {
              result0 = [result0, result1];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
          if (result0 !== null) {
            result0 = (function(op, fl) {
                return { op : op, optype : 'rethaltop', flag : fl};
              })(result0[0], result0[1]);
          }
          if (result0 === null) {
            pos = pos0;
          }
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_flag() {
        var cacheKey = "flag@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        if (input.charCodeAt(pos) === 95) {
          result0 = "_";
          pos += 1;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"_\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_flag_name();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(fl) {return fl;})(result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        if (result0 === null) {
          pos0 = pos;
          result0 = "";
          if (result0 !== null) {
            result0 = (function(fl) {return fl;})(result0);
          }
          if (result0 === null) {
            pos = pos0;
          }
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_memop() {
        var cacheKey = "memop@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_memop_name();
        if (result0 !== null) {
          result2 = parse_whitespace();
          if (result2 !== null) {
            result1 = [];
            while (result2 !== null) {
              result1.push(result2);
              result2 = parse_whitespace();
            }
          } else {
            result1 = null;
          }
          if (result1 !== null) {
            result2 = parse_regaddr();
            if (result2 !== null) {
              result3 = parse_delimiter();
              if (result3 !== null) {
                result4 = parse_rinaddroff();
                if (result4 === null) {
                  result4 = parse_absaddr_mem();
                }
                if (result4 !== null) {
                  result0 = [result0, result1, result2, result3, result4];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(op, reg, mem) {
              return { op : op, optype : 'memop', reg : reg, mem : mem };
            })(result0[0], result0[2], result0[4]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_stackop() {
        var cacheKey = "stackop@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_stackop_name();
        if (result0 !== null) {
          result2 = parse_whitespace();
          if (result2 !== null) {
            result1 = [];
            while (result2 !== null) {
              result1.push(result2);
              result2 = parse_whitespace();
            }
          } else {
            result1 = null;
          }
          if (result1 !== null) {
            result2 = parse_regaddr();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(op, reg) {
              return { op : op, optype : 'stackop', reg : reg };
            })(result0[0], result0[2]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_orgop() {
        var cacheKey = "orgop@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_orgop_name();
        if (result0 !== null) {
          result2 = parse_whitespace();
          if (result2 !== null) {
            result1 = [];
            while (result2 !== null) {
              result1.push(result2);
              result2 = parse_whitespace();
            }
          } else {
            result1 = null;
          }
          if (result1 !== null) {
            result2 = parse_number();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(op, value) {
              return { op : op, optype : 'orgop', value : value };
            })(result0[0], result0[2]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_dwop() {
        var cacheKey = "dwop@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4, result5, result6;
        var pos0, pos1, pos2, pos3;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_dwop_name();
        if (result0 !== null) {
          result2 = parse_whitespace();
          if (result2 !== null) {
            result1 = [];
            while (result2 !== null) {
              result1.push(result2);
              result2 = parse_whitespace();
            }
          } else {
            result1 = null;
          }
          if (result1 !== null) {
            pos2 = pos;
            result3 = parse_number();
            if (result3 !== null) {
              pos3 = pos;
              if (input.charCodeAt(pos) === 44) {
                result4 = ",";
                pos += 1;
              } else {
                result4 = null;
                if (reportFailures === 0) {
                  matchFailed("\",\"");
                }
              }
              if (result4 !== null) {
                result5 = [];
                result6 = parse_whitespace();
                while (result6 !== null) {
                  result5.push(result6);
                  result6 = parse_whitespace();
                }
                if (result5 !== null) {
                  result4 = [result4, result5];
                } else {
                  result4 = null;
                  pos = pos3;
                }
              } else {
                result4 = null;
                pos = pos3;
              }
              if (result4 === null) {
                result4 = "";
              }
              if (result4 !== null) {
                result3 = [result3, result4];
              } else {
                result3 = null;
                pos = pos2;
              }
            } else {
              result3 = null;
              pos = pos2;
            }
            if (result3 !== null) {
              result2 = [];
              while (result3 !== null) {
                result2.push(result3);
                pos2 = pos;
                result3 = parse_number();
                if (result3 !== null) {
                  pos3 = pos;
                  if (input.charCodeAt(pos) === 44) {
                    result4 = ",";
                    pos += 1;
                  } else {
                    result4 = null;
                    if (reportFailures === 0) {
                      matchFailed("\",\"");
                    }
                  }
                  if (result4 !== null) {
                    result5 = [];
                    result6 = parse_whitespace();
                    while (result6 !== null) {
                      result5.push(result6);
                      result6 = parse_whitespace();
                    }
                    if (result5 !== null) {
                      result4 = [result4, result5];
                    } else {
                      result4 = null;
                      pos = pos3;
                    }
                  } else {
                    result4 = null;
                    pos = pos3;
                  }
                  if (result4 === null) {
                    result4 = "";
                  }
                  if (result4 !== null) {
                    result3 = [result3, result4];
                  } else {
                    result3 = null;
                    pos = pos2;
                  }
                } else {
                  result3 = null;
                  pos = pos2;
                }
              }
            } else {
              result2 = null;
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(op, values) {
              var vals = [];
        
              for (var i=0; i<values.length; i++) {
                vals.push(values[i][0]);
              }
        
              return { op : op, optype : 'dwop', values : vals };
            })(result0[0], result0[2]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_equop() {
        var cacheKey = "equop@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_equop_name();
        if (result0 !== null) {
          result2 = parse_whitespace();
          if (result2 !== null) {
            result1 = [];
            while (result2 !== null) {
              result1.push(result2);
              result2 = parse_whitespace();
            }
          } else {
            result1 = null;
          }
          if (result1 !== null) {
            result2 = parse_number();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(op, value) {
              return { op : op, optype : 'equop', value : value };
            })(result0[0], result0[2]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_dsop() {
        var cacheKey = "dsop@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_dsop_name();
        if (result0 !== null) {
          result2 = parse_whitespace();
          if (result2 !== null) {
            result1 = [];
            while (result2 !== null) {
              result1.push(result2);
              result2 = parse_whitespace();
            }
          } else {
            result1 = null;
          }
          if (result1 !== null) {
            result2 = parse_number();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(op, value) {
              return { op : op, optype : 'dsop', value : value };
            })(result0[0], result0[2]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_endop() {
        var cacheKey = "endop@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0;
        var pos0;
        
        pos0 = pos;
        result0 = parse_endop_name();
        if (result0 !== null) {
          result0 = (function(op) { return { op : op, optype : 'endop'}; })(result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_baseop() {
        var cacheKey = "baseop@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_baseop_name();
        if (result0 !== null) {
          result2 = parse_whitespace();
          if (result2 !== null) {
            result1 = [];
            while (result2 !== null) {
              result1.push(result2);
              result2 = parse_whitespace();
            }
          } else {
            result1 = null;
          }
          if (result1 !== null) {
            result2 = parse_base();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(op, base) {
              return { op : op, optype : 'baseop', value : base};
            })(result0[0], result0[2]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_dwhbop() {
        var cacheKey = "dwhbop@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4, result5, result6;
        var pos0, pos1, pos2, pos3;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_dwhbop_name();
        if (result0 !== null) {
          result2 = parse_whitespace();
          if (result2 !== null) {
            result1 = [];
            while (result2 !== null) {
              result1.push(result2);
              result2 = parse_whitespace();
            }
          } else {
            result1 = null;
          }
          if (result1 !== null) {
            pos2 = pos;
            result3 = parse_immaddr();
            if (result3 !== null) {
              pos3 = pos;
              if (input.charCodeAt(pos) === 44) {
                result4 = ",";
                pos += 1;
              } else {
                result4 = null;
                if (reportFailures === 0) {
                  matchFailed("\",\"");
                }
              }
              if (result4 !== null) {
                result5 = [];
                result6 = parse_whitespace();
                while (result6 !== null) {
                  result5.push(result6);
                  result6 = parse_whitespace();
                }
                if (result5 !== null) {
                  result4 = [result4, result5];
                } else {
                  result4 = null;
                  pos = pos3;
                }
              } else {
                result4 = null;
                pos = pos3;
              }
              if (result4 === null) {
                result4 = "";
              }
              if (result4 !== null) {
                result3 = [result3, result4];
              } else {
                result3 = null;
                pos = pos2;
              }
            } else {
              result3 = null;
              pos = pos2;
            }
            if (result3 !== null) {
              result2 = [];
              while (result3 !== null) {
                result2.push(result3);
                pos2 = pos;
                result3 = parse_immaddr();
                if (result3 !== null) {
                  pos3 = pos;
                  if (input.charCodeAt(pos) === 44) {
                    result4 = ",";
                    pos += 1;
                  } else {
                    result4 = null;
                    if (reportFailures === 0) {
                      matchFailed("\",\"");
                    }
                  }
                  if (result4 !== null) {
                    result5 = [];
                    result6 = parse_whitespace();
                    while (result6 !== null) {
                      result5.push(result6);
                      result6 = parse_whitespace();
                    }
                    if (result5 !== null) {
                      result4 = [result4, result5];
                    } else {
                      result4 = null;
                      pos = pos3;
                    }
                  } else {
                    result4 = null;
                    pos = pos3;
                  }
                  if (result4 === null) {
                    result4 = "";
                  }
                  if (result4 !== null) {
                    result3 = [result3, result4];
                  } else {
                    result3 = null;
                    pos = pos2;
                  }
                } else {
                  result3 = null;
                  pos = pos2;
                }
              }
            } else {
              result2 = null;
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(op, values) {
              var vals = [];
        
              for (var i=0; i<values.length; i++) {
                vals.push(values[i][0]);
              }
        
              var size = op === "DW" ? 4 : (op === "DH" ? 2 : 1);
        
              return { op : op, optype : 'dwhbop', values : vals, size : size};
            })(result0[0], result0[2]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_commentPart() {
        var cacheKey = "commentPart@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = pos;
        result0 = [];
        result1 = parse_whitespace();
        while (result1 !== null) {
          result0.push(result1);
          result1 = parse_whitespace();
        }
        if (result0 !== null) {
          pos1 = pos;
          if (input.charCodeAt(pos) === 59) {
            result1 = ";";
            pos += 1;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\";\"");
            }
          }
          if (result1 !== null) {
            result2 = [];
            if (/^[^\n]/.test(input.charAt(pos))) {
              result3 = input.charAt(pos);
              pos++;
            } else {
              result3 = null;
              if (reportFailures === 0) {
                matchFailed("[^\\n]");
              }
            }
            while (result3 !== null) {
              result2.push(result3);
              if (/^[^\n]/.test(input.charAt(pos))) {
                result3 = input.charAt(pos);
                pos++;
              } else {
                result3 = null;
                if (reportFailures === 0) {
                  matchFailed("[^\\n]");
                }
              }
            }
            if (result2 !== null) {
              result1 = [result1, result2];
            } else {
              result1 = null;
              pos = pos1;
            }
          } else {
            result1 = null;
            pos = pos1;
          }
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_whitespace() {
        var cacheKey = "whitespace@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0;
        
        if (input.charCodeAt(pos) === 32) {
          result0 = " ";
          pos += 1;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\" \"");
          }
        }
        if (result0 === null) {
          if (input.charCodeAt(pos) === 9) {
            result0 = "\t";
            pos += 1;
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"\\t\"");
            }
          }
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_register() {
        var cacheKey = "register@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        if (/^[rR]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[rR]");
          }
        }
        if (result0 !== null) {
          if (/^[0-7]/.test(input.charAt(pos))) {
            result1 = input.charAt(pos);
            pos++;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("[0-7]");
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(regnum) {
            return parseInt(regnum, 10);
          })(result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_number() {
        var cacheKey = "number@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4;
        var pos0, pos1, pos2;
        
        pos0 = pos;
        pos1 = pos;
        pos2 = pos;
        if (input.charCodeAt(pos) === 37) {
          result0 = "%";
          pos += 1;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"%\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_base();
          if (result1 !== null) {
            if (input.charCodeAt(pos) === 32) {
              result3 = " ";
              pos += 1;
            } else {
              result3 = null;
              if (reportFailures === 0) {
                matchFailed("\" \"");
              }
            }
            if (result3 !== null) {
              result2 = [];
              while (result3 !== null) {
                result2.push(result3);
                if (input.charCodeAt(pos) === 32) {
                  result3 = " ";
                  pos += 1;
                } else {
                  result3 = null;
                  if (reportFailures === 0) {
                    matchFailed("\" \"");
                  }
                }
              }
            } else {
              result2 = null;
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos2;
            }
          } else {
            result0 = null;
            pos = pos2;
          }
        } else {
          result0 = null;
          pos = pos2;
        }
        if (result0 === null) {
          result0 = "";
        }
        if (result0 !== null) {
          if (/^[+\-]/.test(input.charAt(pos))) {
            result1 = input.charAt(pos);
            pos++;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("[+\\-]");
            }
          }
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            if (/^[0-9]/.test(input.charAt(pos))) {
              result2 = input.charAt(pos);
              pos++;
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("[0-9]");
              }
            }
            if (result2 !== null) {
              result3 = [];
              if (/^[0-9a-hA-H]/.test(input.charAt(pos))) {
                result4 = input.charAt(pos);
                pos++;
              } else {
                result4 = null;
                if (reportFailures === 0) {
                  matchFailed("[0-9a-hA-H]");
                }
              }
              while (result4 !== null) {
                result3.push(result4);
                if (/^[0-9a-hA-H]/.test(input.charAt(pos))) {
                  result4 = input.charAt(pos);
                  pos++;
                } else {
                  result4 = null;
                  if (reportFailures === 0) {
                    matchFailed("[0-9a-hA-H]");
                  }
                }
              }
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(b, p, first, rest) {
            var d = ["0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f"];
            var base = (b === "") ? defaultBase : b[1];
            var digits = [first].concat(rest)
            for (var i=0; i<digits.length; i++) {
              var found = false;
              for (var j=0; j<base; j++) {
                if (digits[i].toLowerCase() === d[j]) {
                  found = true;
                  break;
                }
              }
        
              if (!found) {
                return null;
              }
            }
        
            var prefix = p === "-" ? -1 : 1;
            return prefix*parseInt(digits.join(""), base);
          })(result0[0], result0[1], result0[2], result0[3]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_base() {
        var cacheKey = "base@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0;
        var pos0;
        
        pos0 = pos;
        if (/^[bBoOdDhH]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[bBoOdDhH]");
          }
        }
        if (result0 !== null) {
          result0 = (function(b) {
            b = b.toLowerCase();
        
            if(b === "b") {
              return 2;
            } else if (b === "o") {
              return 8;
            } else if (b === "d") {
              return 10;
            } else if (b === "h") {
              return 16;
            }
          })(result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_numberWithoutBase() {
        var cacheKey = "numberWithoutBase@" + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        if (/^[+\-]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[+\\-]");
          }
        }
        if (result0 !== null) {
          if (/^[0-9]/.test(input.charAt(pos))) {
            result1 = input.charAt(pos);
            pos++;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("[0-9]");
            }
          }
          if (result1 !== null) {
            result2 = [];
            if (/^[0-9a-hA-H]/.test(input.charAt(pos))) {
              result3 = input.charAt(pos);
              pos++;
            } else {
              result3 = null;
              if (reportFailures === 0) {
                matchFailed("[0-9a-hA-H]");
              }
            }
            while (result3 !== null) {
              result2.push(result3);
              if (/^[0-9a-hA-H]/.test(input.charAt(pos))) {
                result3 = input.charAt(pos);
                pos++;
              } else {
                result3 = null;
                if (reportFailures === 0) {
                  matchFailed("[0-9a-hA-H]");
                }
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(p, first, rest) {
            return (p === "-" ? -1 : 1) * parseInt( first + rest.join(""), defaultBase);
          })(result0[0], result0[1], result0[2]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function buildErrorMessage() {
        function buildExpected(failuresExpected) {
          failuresExpected.sort();
          
          var lastFailure = null;
          var failuresExpectedUnique = [];
          for (var i = 0; i < failuresExpected.length; i++) {
            if (failuresExpected[i] !== lastFailure) {
              failuresExpectedUnique.push(failuresExpected[i]);
              lastFailure = failuresExpected[i];
            }
          }
          
          switch (failuresExpectedUnique.length) {
            case 0:
              return "end of input";
            case 1:
              return failuresExpectedUnique[0];
            default:
              return failuresExpectedUnique.slice(0, failuresExpectedUnique.length - 1).join(", ")
                + " or "
                + failuresExpectedUnique[failuresExpectedUnique.length - 1];
          }
        }
        
        var expected = buildExpected(rightmostFailuresExpected);
        var actualPos = Math.max(pos, rightmostFailuresPos);
        var actual = actualPos < input.length
          ? quote(input.charAt(actualPos))
          : "end of input";
        
        return "Expected " + expected + " but " + actual + " found.";
      }
      
      function computeErrorPosition() {
        /*
         * The first idea was to use |String.split| to break the input up to the
         * error position along newlines and derive the line and column from
         * there. However IE's |split| implementation is so broken that it was
         * enough to prevent it.
         */
        
        var line = 1;
        var column = 1;
        var seenCR = false;
        
        for (var i = 0; i < Math.max(pos, rightmostFailuresPos); i++) {
          var ch = input.charAt(i);
          if (ch === "\n") {
            if (!seenCR) { line++; }
            column = 1;
            seenCR = false;
          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
            line++;
            column = 1;
            seenCR = true;
          } else {
            column++;
            seenCR = false;
          }
        }
        
        return { line: line, column: column };
      }
      
      
        var defaultBase = 16;
        var curloc = 0;
        var labels = {};
        var instructions = [];
        var instruction = {};
        var linecounter = 1;
      
        var moveops = {
          "MOVE"   : "00000"
        };
      
        var aluops = {
          "OR"     : "00001",
          "AND"    : "00010",
          "XOR"    : "00011",
          "ADD"    : "00100",
          "ADC"    : "00101",
          "SUB"    : "00110",
          "SBC"    : "00111",
          "ROTL"   : "01000",
          "ROTR"   : "01001",
          "SHL"    : "01010",
          "SHR"    : "01011",
          "ASHR"   : "01100"
        };
      
        var cmpops = {
          "CMP"    : "01101"
        };
          // 01110 Not used
          // 01111 Not used
      
        var rethaltops = {
          "RET"    : "11011",
          "RETI"   : "11011",
          "RETN"   : "11011",
          "HALT"   : "11111"
        };
      
        var jmpops = {
          "JP"     : "11000",
          "CALL"   : "11001",
          "JR"     : "11010"
        };
      
        var memops = {
          "LOAD"   : "10110",
          "STORE"  : "10111",
          "LOADB"  : "10010",
          "STOREB" : "10011",
          "LOADH"  : "10100",
          "STOREH" : "10101"
        };
      
        var stackops = {
          "POP"    : "10000",
          "PUSH"   : "10001"
        };
      
        var orgops = {
          "`ORG" : ""
        };
      
        var dwops = {
          "`DW" : ""
        };
      
        var equops = {
          "`EQU" : ""
        };
      
        var dsops = {
          "`DS" : ""
        };
      
        var endops = {
          "`END" : ""
        };
      
        var baseops = {
          "`BASE" : ""
        };
      
        var dwhbops = {
          "DW" : "",
          "DH" : "",
          "DB" : ""
        };
      
        var flags = {
          ""   : "0000",
          "N"  : "0001",   "M"   : "0001",
          "NN" : "0010",   "P"   : "0010",
          "C"  : "0011",   "ULT" : "0011",
          "NC" : "0100",   "UGE" : "0100",
          "V"  : "0101",
          "NV" : "0110",
          "Z"  : "0111",   "EQ"  : "0111",
          "NZ" : "1000",   "NE"  : "1000",
      
          "ULE"  : "1001",
          "UGT"  : "1010",
          "SLT"  : "1011",
          "SLE"  : "1100",
          "SGE"  : "1101",
          "SGT"  : "1110"
        };
      
        var allops = {
          aluop : aluops, moveop : moveops, cmpop : cmpops, memop : memops, stackop : stackops,
          jmpop : jmpops, rethaltop : rethaltops, equop : equops, dwop : dwops, orgop : orgops, dsop : dsops,
          endop : endops, dwhbop : dwhbops, baseop : baseops
        };
      
        var addLabel = function(label, value) {
          label = label.trim();
      
          if (typeof labels[label] === 'undefined') {
            labels[label] = value;
          } else {
            var err = new Error("Existing label: " + label);
            err.line = linecounter;
            err.column = 1;
            throw err;
          }
        };
      
        var generateMachineCode = function(node) {
          if (typeof node === 'undefined' || typeof node.op === 'undefined' || typeof node.optype === 'undefined' ||
              typeof allops[node.optype] === 'undefined' || typeof allops[node.optype][node.op] === 'undefined') {
            throw new Error("Undefined instruction, operation or operation type." + JSON.stringify(node));
          }
      
          var machineCode = null;
      
          if (node.optype in {cmpop : null, aluop : null, moveop : null, memop : null, stackop : null, jmpop : null, rethaltop: null}) {
            // set opcode
            machineCode = "00000000000000000000000000000000".split("");
            setBits(machineCode, 27, 31, allops[node.optype][node.op]);
          } else {
            machineCode = [];
          }
      
          switch(node.optype) {
            case 'cmpop':
            case 'aluop':
              if (node.optype === 'aluop') {
                setBits(machineCode, 23, 25, convertIntToBinary(node.aludest.value, 3));
              }
              setBits(machineCode, 20, 22, convertIntToBinary(node.alusrc1.value, 3));
      
              if (node.alusrc2.type === "reg") {
                setBits(machineCode, 26, 26, "0");
                setBits(machineCode, 17, 19, convertIntToBinary(node.alusrc2.value, 3));
                setBits(machineCode, 0, 16, "00000000000000000");
              } else {
                setBits(machineCode, 26, 26, "1");
                setBits(machineCode, 0, 19, convertIntToBinary(node.alusrc2.value, 20));
              }
      
              break;
            case 'moveop':
              if (node.aludest.type === "reg" && (node.alusrc2.type === "reg" || node.alusrc2.type === "num")) {
                // Kada je odredište opći registar, a izvor opći registar ili podatak:
                setBits(machineCode, 23, 25, convertIntToBinary(node.aludest.value, 3));
                setBits(machineCode, 20, 22, "000");
                if (node.alusrc2.type === "reg") {
                  setBits(machineCode, 26, 26, "0");
                  setBits(machineCode, 17, 19, convertIntToBinary(node.alusrc2.value, 3));
                } else {
                  setBits(machineCode, 26, 26, "1");
                  setBits(machineCode, 0, 19, convertIntToBinary(node.alusrc2.value, 20));
                }
              } else if (node.aludest.type === "sr") {
                // Kada je odredište registar SR:
                setBits(machineCode, 20, 22, "001");
                if (node.alusrc2.type === "reg") {
                  setBits(machineCode, 26, 26, "0");
                  setBits(machineCode, 17, 19, convertIntToBinary(node.alusrc2.value, 3));
                } else {
                  setBits(machineCode, 26, 26, "1");
                  setBits(machineCode, 0, 19, convertIntToBinary(node.alusrc2.value, 20));
                }
              } else if (node.alusrc2.type === "sr") {
                // Kada je izvor registar SR:
                setBits(machineCode, 20, 22, "010");
                setBits(machineCode, 23, 25, convertIntToBinary(node.aludest.value, 3));
                setBits(machineCode, 0, 19, "00000000000000000000");
              }
      
              break;
            case 'jmpop':
              setBits(machineCode, 20, 21, "00");
              setBits(machineCode, 22, 25, flags[node.flag]);
              if (node.addr.type === "num") {
                setBits(machineCode, 26, 26, "1");
                setBits(machineCode, 0, 19, convertIntToBinary(node.addr.value, 20));
              } else {
                setBits(machineCode, 26, 26, "0");
                setBits(machineCode, 17, 19, convertIntToBinary(node.addr.value, 3));
              }
              break;
            case 'rethaltop':
              setBits(machineCode, 22, 25, flags[node.flag]);
              if (node.op === 'RET') {
                setBits(machineCode, 0, 0, "0");
                setBits(machineCode, 1, 1, "0");
              } else if (node.op === 'RETI') {
                setBits(machineCode, 0, 0, "1");
                setBits(machineCode, 1, 1, "0");
              } else if (node.op === 'RETN') {
                setBits(machineCode, 0, 0, "1");
                setBits(machineCode, 1, 1, "1");
              }
      
              break;
            case 'memop':
              setBits(machineCode, 23, 25, convertIntToBinary(node.reg.value, 3));
              if (node.mem.type === "regoff") {
                setBits(machineCode, 26, 26, "1");
                setBits(machineCode, 20, 22, convertIntToBinary(node.mem.value, 3));
                setBits(machineCode, 0, 19, convertIntToBinary(node.mem.offset, 20));
              } else {
                setBits(machineCode, 26, 26, "0");
                setBits(machineCode, 0, 19, convertIntToBinary(node.mem.value, 20));
              }
              break;
            case 'stackop':
              setBits(machineCode, 23, 25, convertIntToBinary(node.reg.value, 3));
              break;
            case 'dwop':
              for (var i=0; i<node.values.length; i++) {
                machineCode.push(convertIntToBinary(node.values[i], 8));
              }
              break;
            case 'dsop':
              for (var i=0; i<node.value; i++) {
                machineCode.push(convertIntToBinary(0, 8));
              }
              break;
            case 'dwhbop':
              for (var i=0; i<node.values.length; i++) {
                machineCode.push(convertIntToBinary(node.values[i], node.size*8));
              }
              break;
          }
          if (node.optype in {cmpop : null, aluop : null, moveop : null, memop : null, stackop : null, jmpop : null, rethaltop : null}) {
            node.machineCode = machineCode.join("");
          } else {
            node.machineCode = machineCode;
          }
        };
      
        var setBits = function(oldBits, from, to, newBits) {
          var len = oldBits.length;
      
          for (var i=0; i<from-to+1 || i<newBits.length; i++) {
            oldBits[len-to-1+i] = newBits[i];
          }
      
          return oldBits;
        };
      
        /* Converts integer value to binary, specifying the length in bits of output */
        function convertIntToBinary(value, numberOfBits) {
          var retVal = new Array(numberOfBits);
      
          for (var i=0; i<numberOfBits; i++) {
            retVal[numberOfBits-i-1] = (Math.pow(2, i) & value) ? 1 : 0;
          }
      
          return retVal.join("");
        }
      
      
      var result = parseFunctions[startRule]();
      
      /*
       * The parser is now in one of the following three states:
       *
       * 1. The parser successfully parsed the whole input.
       *
       *    - |result !== null|
       *    - |pos === input.length|
       *    - |rightmostFailuresExpected| may or may not contain something
       *
       * 2. The parser successfully parsed only a part of the input.
       *
       *    - |result !== null|
       *    - |pos < input.length|
       *    - |rightmostFailuresExpected| may or may not contain something
       *
       * 3. The parser did not successfully parse any part of the input.
       *
       *   - |result === null|
       *   - |pos === 0|
       *   - |rightmostFailuresExpected| contains at least one failure
       *
       * All code following this comment (including called functions) must
       * handle these states.
       */
      if (result === null || pos !== input.length) {
        var errorPosition = computeErrorPosition();
        throw new this.SyntaxError(
          buildErrorMessage(),
          errorPosition.line,
          errorPosition.column
        );
      }
      
      return result;
    },
    
    /* Returns the parser source code. */
    toSource: function() { return this._source; }
  };
  
  /* Thrown when a parser encounters a syntax error. */
  
  result.SyntaxError = function(message, line, column) {
    this.name = "SyntaxError";
    this.message = message;
    this.line = line;
    this.column = column;
  };
  
  result.SyntaxError.prototype = Error.prototype;
  
  return result;
})();

if (typeof module !== "undefined" && typeof module.exports !== "undefined") {
  module.exports = frisc_asm;
}
